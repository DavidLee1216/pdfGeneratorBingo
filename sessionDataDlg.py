# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'soldDataDlg.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import pdfWriter
import gui
import session_manager

class Ui_Dialog(object):
    session_name = ""
    session_id = 0
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(695, 810)
        Dialog.setStyleSheet("QDialog{background-color: cyan;}")
        
        self.sessionInfoList = QtWidgets.QTableView(Dialog)
        self.sessionInfoList.setGeometry(QtCore.QRect(40, 50, 611, 471))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.sessionInfoList.setFont(font)
        self.sessionInfoList.setObjectName("tableView")
        self.sessionDataModel = QtGui.QStandardItemModel()
        self.sessionDataModel.setHorizontalHeaderLabels(['id', 'name', 'date', 'anytime', 'from', 'to'])
        self.sessionInfoList.setModel(self.sessionDataModel)
        self.sessionInfoList.setColumnWidth(0, 80)
        self.sessionInfoList.setColumnWidth(1, 150)
        self.sessionInfoList.setColumnWidth(2, 100)
        self.sessionInfoList.setColumnWidth(3, 80)
        self.sessionInfoList.setColumnWidth(4, 100)
        self.sessionInfoList.setColumnWidth(5, 100)
        self.sessionInfoList.setShowGrid(False)
        self.sessionInfoList.setStyleSheet("background-color: rgb(255, 255, 255);")

        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(50)
        self.new_session_name_label = QtWidgets.QLabel(Dialog)
        self.new_session_name_label.setGeometry(QtCore.QRect(60, 540, 400, 30))
        self.new_session_name_label.setFont(font)
        self.new_session_name_label.setText("Please enter session name to modify to")
        self.new_session_name = QtWidgets.QLineEdit(Dialog)
        self.new_session_name.setGeometry(QtCore.QRect(420, 540, 220, 30))
        self.new_session_name.setFont(font)

        self.thirdline_layout_label = QtWidgets.QLabel(Dialog)
        self.thirdline_layout_label.setGeometry(QtCore.QRect(40, 580, 500, 30))
        self.thirdline_layout_label.setFont(font)
        self.thirdline_layout_label.setStyleSheet("color: rgb(0, 0, 0); border: none; margin-right: 50px;")
        self.thirdline_layout_label.setText("Please choose the date on which session will play:")
        
        self.datepicker = QtWidgets.QDateEdit(calendarPopup=True, parent=Dialog)
        self.datepicker.setDate(QtCore.QDate.currentDate())
        self.datepicker.setGeometry(QtCore.QRect(500, 580, 110, 30))
        
        self.anytime_checkbox = QtWidgets.QCheckBox("Anytime on the date", Dialog)
        self.anytime_checkbox.setStyleSheet("QCheckBox::indicator { width: 40px; height: 40px;}")
        self.anytime_checkbox.setStyleSheet("color: rgb(0, 0, 0);")
        self.anytime_checkbox.setGeometry(QtCore.QRect(50, 620, 250, 40))
        self.anytime_checkbox.setLayoutDirection(QtCore.Qt.RightToLeft) 
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(50)
        self.anytime_checkbox.setFont(font)
        self.anytime_checkbox.setChecked(True)
        self.anytimeChecked = True
        self.anytime_checkbox.stateChanged.connect(self.setAnytimeCheckBox)
        
        self.specifictime_checkbox = QtWidgets.QCheckBox("Specific time on the date", Dialog)
        self.specifictime_checkbox.setStyleSheet("color: rgb(0, 0, 0);")
        self.specifictime_checkbox.setGeometry(QtCore.QRect(330, 620, 280, 40))
        self.specifictime_checkbox.setLayoutDirection(QtCore.Qt.RightToLeft) 
        self.specifictime_checkbox.setFont(font)
        self.specifictime_checkbox.stateChanged.connect(self.setSpecifictimeCheckBox)

        self.sixthline_from_label = QtWidgets.QLabel(Dialog)
        self.sixthline_from_label.setGeometry(QtCore.QRect(180, 670, 70, 40))
        font = QtGui.QFont()
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(50)
        self.sixthline_from_label.setFont(font)
        self.sixthline_from_label.setStyleSheet("color: rgb(0, 0, 0);border: none;")
        self.sixthline_from_label.setText("From:")
        self.sixthline_to_label = QtWidgets.QLabel(Dialog)
        self.sixthline_to_label.setGeometry(QtCore.QRect(430, 670, 40, 40))
        self.sixthline_to_label.setFont(font)
        self.sixthline_to_label.setStyleSheet("color: rgb(0, 0, 0);border: none;")
        self.sixthline_to_label.setText("To:")

        self.time_from = QtWidgets.QTimeEdit(Dialog)
        self.time_from.setGeometry(QtCore.QRect(260, 670, 150, 40))
        self.time_from.setFont(font)
        self.time_from.setStyleSheet("background-color: rgb(254, 224, 17);")

        self.time_to = QtWidgets.QTimeEdit(Dialog)
        self.time_to.setGeometry(QtCore.QRect(480, 670, 150, 40))
        self.time_to.setFont(font)
        self.time_to.setStyleSheet("background-color: rgb(254, 224, 17);")

        self.closeButton = QtWidgets.QPushButton(Dialog)
        self.closeButton.setGeometry(QtCore.QRect(440, 740, 120, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.closeButton.setFont(font)
        self.closeButton.setObjectName("closeButton")
        self.closeButton.clicked.connect(Dialog.reject)
        
        self.deleteSessionButton = QtWidgets.QPushButton(Dialog)
        self.deleteSessionButton.setGeometry(QtCore.QRect(140, 740, 120, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.deleteSessionButton.setFont(font)
        self.deleteSessionButton.setObjectName("deleteSessionButton")
        self.deleteSessionButton.clicked.connect(self.deleteSessionClick)
        
        self.changeSessionButton = QtWidgets.QPushButton(Dialog)
        self.changeSessionButton.setGeometry(QtCore.QRect(290, 740, 120, 40))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.changeSessionButton.setFont(font)
        self.changeSessionButton.setObjectName("changeSessionButton")
        self.changeSessionButton.clicked.connect(self.changeSession)

        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(40, 10, 161, 31))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.label.setFont(font)
        self.label.setObjectName("label")

        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
        
        self.loadSessionInfo()
        
    def setAnytimeCheckBox(self, state):
        if state==QtCore.Qt.Checked:
            self.anytimeChecked = True
            self.specifictime_checkbox.setChecked(False)
        else:
            self.anytimeChecked = False
            self.specifictime_checkbox.setChecked(True)
    
    def setSpecifictimeCheckBox(self, state):
        if state==QtCore.Qt.Checked:
            self.specificChecked = True
            self.anytime_checkbox.setChecked(False)
        else:
            self.specificChecked = False
            self.anytime_checkbox.setChecked(True)

    def deleteSessionClick(self):
        index = self.sessionInfoList.currentIndex()
        idx = index.row()
        if idx==-1:
            pdfWriter.show_message('warning', 'Please select session info to delete.')
            return
        id = int(self.sessionInfoList.model().item(idx, 0).text())
        name = self.sessionInfoList.model().item(idx, 1).text()
        ret = pdfWriter.show_message('Confirm', 'Do you really want to delete session data for id = {}, name = {} ?\r\n You will lost all printed data, sold data.'
                                     .format(str(id), name), 'MB_YESNO')
        if ret==0:
            return
        query = "delete from sell_info where session_id='{}'".format(id)
        mycursor = gui.mydb.cursor()
        mycursor.execute(query)
        query = "delete from print_info where session_id='{}'".format(id)
        mycursor.execute(query)
        query = "delete from soldtickets_new where session_id='{}'".format(id)
        mycursor.execute(query)
        query = "delete from game_session_info where id='{}'".format(id)
        mycursor.execute(query)
        gui.mydb.commit()
        self.loadSessionInfo()
        pdfWriter.show_message('', 'Successfully deleted.')

    def changeSession(self):
        session_name = self.new_session_name.text()
        if session_manager.SessionManager.check_session_name_validation(session_name)==False:
            pdfWriter.show_message('warning', 'Session name includes special characters. Change the session name.')
            return
        index = self.sessionInfoList.currentIndex()
        idx = index.row()
        if idx==-1:
            pdfWriter.show_message('warning', 'Please select session info to change.')
            return
        session_id = int(self.sessionInfoList.model().item(idx, 0).text())
        session_date = str(self.datepicker.date().year())+'-'+str(self.datepicker.date().month())+'-'+str(self.datepicker.date().day())
        anytime_flag = 1 if self.anytimeChecked==True else 0
        time_from = "{:02d}".format(self.time_from.time().hour())+":{:02d}".format(self.time_from.time().minute())+':'+'00'
        time_to = "{:02d}".format(self.time_to.time().hour())+":{:02d}".format(self.time_from.time().minute())+':'+'00'
        if session_name != "":
            query = "update game_session_info set session_name='{}', date='{}', anytime_flag='{}', time_from='{}', time_to='{}' where id='{}'".format(
                            session_name, session_date, anytime_flag, time_from, time_to, session_id
                        )
        else:
            query = "update game_session_info set date='{}', anytime_flag='{}', time_from='{}', time_to='{}' where id='{}'".format(
                            session_date, anytime_flag, time_from, time_to, session_id
                        )

        mycursor = gui.mydb.cursor()
        mycursor.execute(query)
        gui.mydb.commit()
        self.loadSessionInfo()
        pdfWriter.show_message('Success', 'Session data modified.')
    
    def loadSessionInfo(self):
        self.sessionDataModel.clear()
        # self.sessionDataModel.setHorizontalHeaderLabels(['kind', 'print id', 'from', 'to'])
        query = "select * from game_session_info order by id"
        mydb = gui.mydb
        mycursor = mydb.cursor()
        mycursor.execute(query)
        myres = mycursor.fetchall()
        for res in myres:
            id = str(res[0])
            name = str(res[1])
            date = str(res[2])
            anytime = 'yes' if res[3]==1 else 'no'
            time_from = str(res[4])
            time_to = str(res[5])
            self.sessionDataModel.appendRow([QtGui.QStandardItem(id), QtGui.QStandardItem(name), QtGui.QStandardItem(date), QtGui.QStandardItem(anytime)
                                          , QtGui.QStandardItem(time_from), QtGui.QStandardItem(time_to)])
        self.sessionInfoList.model().layoutChanged.emit()
        self.sessionDataModel.setHorizontalHeaderLabels(['id', 'name', 'date', 'anytime', 'from', 'to'])
        self.sessionInfoList.setModel(self.sessionDataModel)
        self.sessionInfoList.setColumnWidth(0, 80)
        self.sessionInfoList.setColumnWidth(1, 150)
        self.sessionInfoList.setColumnWidth(2, 100)
        self.sessionInfoList.setColumnWidth(3, 80)
        self.sessionInfoList.setColumnWidth(4, 100)
        self.sessionInfoList.setColumnWidth(5, 100)
        self.sessionInfoList.setShowGrid(False)
        
    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Session Data"))
        self.closeButton.setText(_translate("Dialog", "Close"))
        self.deleteSessionButton.setText(_translate("Dialog", "Delete Session"))
        self.changeSessionButton.setText(_translate("Dialog", "Change Session"))
        self.label.setText(_translate("Dialog", "Session Data"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)
    Dialog.show()
    sys.exit(app.exec_())
